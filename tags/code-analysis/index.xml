<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code analysis on Offliner&#39;s Blog</title>
    <link>https://Offliners.github.io/tags/code-analysis/</link>
    <description>Recent content in code analysis on Offliner&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 22 Jun 2021 14:42:40 +0800</lastBuildDate><atom:link href="https://Offliners.github.io/tags/code-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ORBSLAM2 程式碼解析 - KeyFrame</title>
      <link>https://Offliners.github.io/post/orbslam2-code-5/</link>
      <pubDate>Tue, 22 Jun 2021 14:42:40 +0800</pubDate>
      
      <guid>https://Offliners.github.io/post/orbslam2-code-5/</guid>
      <description>System Overview Source Code : Link KeyFrame為關鍵幀，主要用來優化圖像，因此內部函式都是圖像的優化服務。要優化圖像需要有節點與邊，節點就是關鍵幀的位姿，因此需要有讀寫關鍵幀位姿的功能。而邊分成兩種，一種是連結MapPoint，所以需要有管理與MapPoint之間關係的函數，另一種是連結其他關鍵幀，由於兩者都需要連結MapPoint，所以當兩者共同觀測到一定數量的MapPoint時則在兩者之間建立邊來連結，這種關係叫做共視，因此需要有管理共視關係的函數。藉由共視關係建立的優化模型叫做Covisibility Graph，當需要優化較大範圍的數據時，就需要大量的計算量，因此在ORBSLAM2中的Essential Graph就是簡化版，透過生成樹(Spanning Tree)來建構優化模型，並將擁有父子關係的關鍵幀建立邊，所以還需要有管理生成樹的函式
在ORB-SLAM: a Versatile and Accurate Monocular SLAM System這篇論文中有上圖可以比較，圖(b)是每個節點是一個關鍵幀。若兩關鍵幀之間共視的MapPoint數量大於15時則建立邊。圖(c)就是生成樹，幫每個關鍵幀找父節點與子節點，每幀個只與自帶的父子節點相連，與其他幀則不相連。因此圖(d)就可以根據圖(c)來建立簡易的圖模型
以下為KeyFrame類別中的主要函數 :
KeyFrame │ ├── KeyFrame // 建構函數 │ ├── // 位姿相關 ├────── SetPose // 設置位姿 ├────── GetPose // 獲取位姿 ├────── GetPoseInverse // 獲取位姿的逆 ├────── GetCamercaCenter // 獲取傳感器中心的座標 ├────── GetStereoCenter // 獲取雙目的中心座標 ├────── GetRotation // 獲取旋轉矩陣 ├────── GetTranslation // 獲取平移矩陣 │ ├── // Covisibility Graph相關 ├────── AddConnection // 增加連結 ├────── EraseConnection // 刪除連結 ├────── UpdateConnection // 更新連結 ├────── UpdateBestCovisibles // 更新最佳的Covisibles ├────── GetConnectedKeyFrames // 獲取連接的關鍵幀 ├────── GetVectorCovisibleKeyFrames // 獲取Covisible關鍵幀 ├────── GetBestCovisibleKeyFrame // 獲取最佳的Covisibility關鍵幀 ├────── GetCovisibleByWeight // 根據權重獲得Covisibility ├────── GetWeight // 獲取權重 ├────── SetNoErase // 設置不要移除 ├────── SetErase // 設置要移除 ├────── SetBadFlag // 刪除關鍵幀以及所有關係 ├────── isBad // 判斷是否需要移除 ├────── AddLoopEdge // 增加回環的邊 ├────── GetLoopEdges // 獲取回環的邊 │ ├── // Spanning Tree相關 ├────── AddChild // 增加子樹 ├────── EraseChild // 刪除子樹 ├────── ChangeParent // 更改父節點 ├────── GetChild // 獲取子節點 ├────── GetParent // 獲取父節點 ├────── hasChild // 判斷是否有子節點 │ ├── // MapPoint相關 ├────── AddMapPoint // 添加MapPoint ├────── EraseMapPointMatch // 移除MapPoint的匹配關係(使用索引) ├────── EraseMapPointMatch // 移除MapPoint的匹配關係(使用MapPoint) ├────── ReplaceMapPointMatch // 更替MapPoint的匹配 ├────── TrackedMapPoint // 跟蹤MapPoint ├────── GetMapPointMatch // 獲取MapPoint的匹配 ├────── GetMapPoints // 獲取所有MapPoint ├────── GetMapPoint // 獲取指定MapPoint │ ├── // Other ├────── ComputeBoW // 利用詞袋計算特徵 ├────── GetFeatureInArea // 獲取特定區域內的特徵點 ├────── UnprojectStereo // 獲取雙目特徵點的3D座標 ├────── IsInImage // 判斷是否在圖像中 ├────── ComputeSceneMedianDepth // 計算場景中的中位深度 ├────── weightComp // 權重的比較 ├────── lId // 比較兩個關鍵幀的幀號 建構函數 KeyFrame::KeyFrame(Frame &amp;amp;F, Map *pMap, KeyFrameDatabase *pKFDB): mnFrameId(F.</description>
    </item>
    
    <item>
      <title>ORBSLAM2 程式碼解析 - Frame</title>
      <link>https://Offliners.github.io/post/orbslam2-code-4/</link>
      <pubDate>Wed, 28 Apr 2021 20:50:07 +0800</pubDate>
      
      <guid>https://Offliners.github.io/post/orbslam2-code-4/</guid>
      <description>System Overview Source Code : Link Frame是指幀，也就是對應的圖像，可以是一元、二元或RGBD，所以此類別所包含SLAM中以幀為單位的操作，有以下方面 :
 讀寫該幀對應的相機位姿 處理幀和特徵點之間的關係，包括判斷特徵點是否在視野內、獲取該幀依定區域內的特徵點、校正特徵點等 恢復深度，如果是RGBD就直接讀取深度值，如果是一元或二元則進行深度恢復  以下為Frame類別中的主要函數 :
Frame │ ├── Frame // 建構函數，有以下五種 ├────── 預設建構函數 ├────── 複製建構函數 ├────── 二元幀建構函數 ├────── RGBD幀建構函數 ├────── 一元幀建構函數 │ ├── ExtractORB // 提取ORB特徵點 │ ├── ComputeBoW // 計算詞袋數據 │ ├── SetPose // 設置相機位姿參數 │ ├── isInFrustum // 判斷路標點是否在視野中 │ ├── GetFeaturesInArea // 查找特定區域內的特徵點 │ ├── ComputeStereoMatches // 利用二元恢復深度 │ ├── ComputeStereoFromRGBD // RGBD獲取深度訊息 │ ├── UnprojectStereo // 特徵點座標反投影到3D地圖點 建構函數 建構函數除了預設與複製之外，其他主要對應三種相機模型，主要功能也類似，就是提取特徵點，然後把特徵點劃分到網格中，使特徵點在圖像中分布較均勻</description>
    </item>
    
    <item>
      <title>ORBSLAM2 程式碼解析 - MapPoint</title>
      <link>https://Offliners.github.io/post/orbslam2-code-3/</link>
      <pubDate>Wed, 28 Apr 2021 14:04:05 +0800</pubDate>
      
      <guid>https://Offliners.github.io/post/orbslam2-code-3/</guid>
      <description>System Overview Source Code : Link MapPoint是地圖中的特徵點，自身參數是3D座標與描述子，在此類別中會完成以下工作 :
 維護關鍵幀之間的共視關係 通過計算描述向量之間的距離，在多個關鍵幀的特徵點中找到最匹配的特徵點 在閉環完成修正後，需要根據修正的主幀位姿來修正特徵點 對於非關鍵幀，也能產生MapPoint，只是是用來給Tracking功能臨時使用  以下為MapPoint中的主要函數
MapPoint │ ├── MapPoint // 建構函數 ├──────── 關鍵幀地圖點建構函數 ├──────── 普通幀地圖點建構函數 │ ├── AddObservation // 增加地圖點觀測關係 │ ├── EraseObservation // 刪除地圖點觀測關係 │ ├── SetBadFlag // 刪除地圖點 │ ├── Replace // 替換地圖點 │ ├── ComputeDistinctiveDescriptors // 計算描述子 │ ├── UpdateNormalAndDepth // 更新法向量和深度值 │ ├── PredictScale // 預測尺度 建構函數 MapPoint 一共有兩個，分別對應關鍵幀與普通幀
關鍵幀的地圖點建構函數 MapPoint(const cv::Mat &amp;amp;Pos, KeyFrame *pRefKF, Map* pMap) Pos為該點的3D位置，pRefKF是參考關鍵幀，pMap是地圖。關鍵幀的地圖點建構函數主要是突出地圖點與關鍵幀之間的關係，一個地圖點會被多個關鍵幀偵測到，多個關鍵幀之間透過共同偵測到的地圖點來產生關係，叫做共視關係。在ORBSLAM中，是透過MapPoint來維護共視關係。在進行BA優化時，指優化具有共視關係的關鍵幀，其他關鍵幀的位姿則不參與優化</description>
    </item>
    
    <item>
      <title>ORBSLAM2 程式碼解析 - System</title>
      <link>https://Offliners.github.io/post/orbslam2-code-2/</link>
      <pubDate>Tue, 27 Apr 2021 19:39:14 +0800</pubDate>
      
      <guid>https://Offliners.github.io/post/orbslam2-code-2/</guid>
      <description>System Overview Source Code : Link 系統流程的入口在System.cc，裡面有4個主要的函數 :
 System TrackStereo TrackRGBD TrackMonocular  其中System是SLAM系統的建構函數，包括所有功能模塊與所有線程的初始化。而TrackStereo、TrackRGBD、TrackMonocular分別為二元、深度與一元相機的數據入口，使用ORBSLAM時會先透過System來生成SLAM系統的使用對象，然後根據傳感器的類型來選擇相對應的入口來傳入數據
建構函數 System System // 建構函數 │ ├── mpVocabulary = new ORBVocabulary(); // 加載ORB詞袋模型 │ │── mpKeyFrameDatabase = new KeyFrameDatabase(*mpVocabulary); │ // 創建關鍵幀數據集，數據集中主要存放詞袋模型中的值，這些值用於閉環檢測與重定位 │ │── mpMap = new Map(); // 創建地圖 │ │── mpFrameDrawer = new FrameDrawer(mpMap); // 畫關鍵幀的Drawer │ │── mpMapDrawer = new MapDrawer(mpMap, strSettingsFile); // 畫地圖的Drawer │ │── mpTracker = new Tracking(this, mpVocabulary, mpFrameDrawer, mpMapDrawer, mpMap, mpKeyFrameDatabase, strSettingsFile, mSensor); │ // 建立跟踪線程 │ │── mpLocalMapper = new LocalMapping(mpMap, mSensor==MONOCULAR); │ // 建立局部地圖線程 │ │── mpLoopCloser = new LoopClosing(mpMap, mpKeyFrameDatabase, mpVocabulary, mSensor!</description>
    </item>
    
    <item>
      <title>ORBSLAM2 程式碼解析 - 論文閱讀</title>
      <link>https://Offliners.github.io/post/orbslam2-code-1/</link>
      <pubDate>Sat, 17 Apr 2021 00:46:46 +0800</pubDate>
      
      <guid>https://Offliners.github.io/post/orbslam2-code-1/</guid>
      <description>ORB-SLAM2: an Open-Source SLAM System for Monocular, Stereo and RGB-D Cameras (https://arxiv.org/abs/1610.06475) ORBSLAM2 : https://github.com/raulmur/ORB_SLAM2 ORBSLAM2 for Windows : https://github.com/phdsky/ORBSLAM24Windows  System Overview 變數命名規則    開頭 變數資料型態     n int   b bool   p pointer   s set   v vector   l list   m class member variable    Coming Soon</description>
    </item>
    
  </channel>
</rss>
